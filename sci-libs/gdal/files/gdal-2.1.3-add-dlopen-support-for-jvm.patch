--- a/configure	2017-03-14 18:30:09.899533349 +0100
+++ b/configure	2017-03-14 18:29:48.091534981 +0100
@@ -1806,7 +1806,7 @@
   --with-python=ARG   Enable python bindings (ARG=yes, no, or path to python binary)
   --with-java       Include Java support (ARG=yes, no or JDK home path)  [default=no]
   --with-mdb       Include MDB driver
-  --with-jvm-lib=ARG        ARG points to Java libjvm path
+  --with-jvm-lib=ARG        ARG is dlopen or points to Java libjvm path
   --with-jvm-lib-add-rpath    Add the libjvm path to the RPATH (no by default)
   --with-rasdaman=DIR        Include rasdaman support (DIR is rasdaman's install dir).
   --with-armadillo=ARG       Include Armadillo support for faster TPS transform computation (ARG=yes/no/path to armadillo install root) [default=no]
@@ -31234,7 +31234,14 @@
 fi
 
 
-    if test "x$with_jvm_lib" != "x"; then
+    if test "x$with_jvm_lib" = "xdlopen"; then
+
+cat >>confdefs.h <<_ACEOF
+#define JVM_LIB_DLOPEN 1
+_ACEOF
+
+        JVM_LIB="-ldl"
+    elif test "x$with_jvm_lib" != "x"; then
         if test -d "$with_jvm_lib"; then
             saved_LDFLAGS="$LDFLAGS"
             LDFLAGS="$LDFLAGS -L$with_jvm_lib"


--- a/configure.in	2017-03-14 18:55:54.413417754 +0100
+++ b/configure.in	2017-03-14 18:56:48.152413732 +0100
@@ -4666,11 +4666,14 @@
         AC_MSG_ERROR("--with-java must be specified.")
     fi
 
-    AC_ARG_WITH(jvm-lib,          [  --with-jvm-lib=[ARG]        ARG points to Java libjvm path],,)
+    AC_ARG_WITH(jvm-lib,          [  --with-jvm-lib=[ARG]        ARG is dlopen or points to Java libjvm path],,)
 
     AC_ARG_WITH(jvm-lib-add-rpath,[  --with-jvm-lib-add-rpath    Add the libjvm path to the RPATH (no by default)],,)
 
-    if test "x$with_jvm_lib" != "x"; then
+    if test "x$with_jvm_lib" = "xdlopen"; then
+        AC_DEFINE_UNQUOTED(JVM_LIB_DLOPEN, 1, [Define to 1 if libjvm.so should be dlopen'd])
+        JVM_LIB="-ldl"
+    elif test "x$with_jvm_lib" != "x"; then
         if test -d "$with_jvm_lib"; then
             saved_LDFLAGS="$LDFLAGS"
             LDFLAGS="$LDFLAGS -L$with_jvm_lib"


--- a/ogr/ogrsf_frmts/mdb/ogrmdbjackcess.cpp	2017-01-20 09:20:53.000000000 +0100
+++ b/ogr/ogrsf_frmts/mdb/ogrmdbjackcess.cpp.new	2017-03-14 19:00:40.712396327 +0100
@@ -29,6 +29,11 @@
 
 #include "ogr_mdb.h"
 
+#if JVM_LIB_DLOPEN
+#include <limits.h>
+#include <stdio.h>
+#endif
+
 CPL_CVSID("$Id: ogrmdbjackcess.cpp 33102 2016-01-23 11:05:59Z rouault $");
 
 static JavaVM *jvm_static = NULL;
@@ -161,9 +166,41 @@
     {
         JavaVM* vmBuf[1];
         jsize nVMs;
+        int ret = 0;
+
+#if JVM_LIB_DLOPEN
+        const char *jvmLibPtr = "libjvm.so";
+        char jvmLib[PATH_MAX];
+
+        FILE *javaCmd = popen("\"${JAVA_HOME}${JAVA_HOME:+/bin/}java\" -XshowSettings 2>&1 | sed -n '/\\bsun\\.boot\\.library\\.path =/s:.* = \\(.*\\):\\1/server/libjvm.so:p'", "r");
+
+        if (javaCmd != NULL)
+        {
+            size_t javaCmdRead = fread(jvmLib, 1, PATH_MAX, javaCmd);
+            ret = pclose(javaCmd);
+
+            if (ret == 0 && javaCmdRead >= 2)
+            {
+                /* Chomp the new line */
+                jvmLib[javaCmdRead - 1] = '\0';
+                jvmLibPtr = jvmLib;
+            }
+        }
+
+        jint (*pfnJNI_GetCreatedJavaVMs)(JavaVM **, jsize, jsize *);
+        pfnJNI_GetCreatedJavaVMs = (jint (*)(JavaVM **, jsize, jsize *))
+            CPLGetSymbol(jvmLibPtr, "JNI_GetCreatedJavaVMs");
+
+        if (pfnJNI_GetCreatedJavaVMs == NULL)
+            return FALSE;
+        else
+            ret = pfnJNI_GetCreatedJavaVMs(vmBuf, 1, &nVMs);
+#else
+        ret = JNI_GetCreatedJavaVMs(vmBuf, 1, &nVMs);
+#endif
 
         /* Are we already called from Java ? */
-        if (JNI_GetCreatedJavaVMs(vmBuf, 1, &nVMs) == JNI_OK && nVMs == 1)
+        if (ret == JNI_OK && nVMs == 1)
         {
             jvm = vmBuf[0];
             if (jvm->GetEnv((void **)&env, JNI_VERSION_1_2) == JNI_OK)
@@ -181,7 +218,23 @@
             JavaVMInitArgs args;
             JavaVMOption options[1];
             args.version = JNI_VERSION_1_2;
-            const char* pszClassPath = CPLGetConfigOption("CLASSPATH", NULL);
+            char* pszClassPathOption = NULL;
+
+            FILE *javaCmd = popen("java-config --with-dependencies --classpath=jackcess-1", "r");
+
+            const char* pszClassPath = NULL;
+            if (javaCmd != NULL)
+            {
+                pszClassPath = CPLReadLine(javaCmd);
+                ret = pclose(javaCmd);
+
+                if (ret != 0)
+                    pszClassPath = NULL;
+            }
+
+            if (pszClassPath == NULL)
+                pszClassPath = CPLGetConfigOption("CLASSPATH", NULL);
+
             char* pszClassPathOption = NULL;
             if (pszClassPath)
             {
@@ -194,11 +247,25 @@
                 args.nOptions = 0;
             args.ignoreUnrecognized = JNI_FALSE;
 
-            int ret = JNI_CreateJavaVM(&jvm, (void **)&env, &args);
+            if (javaCmd != NULL)
+                CPLReadLine(NULL);
+
+#if JVM_LIB_DLOPEN
+            jint (*pfnJNI_CreateJavaVM)(JavaVM **, void **, void *);
+            pfnJNI_CreateJavaVM = (jint (*)(JavaVM **, void **, void *))
+                CPLGetSymbol(jvmLibPtr, "JNI_CreateJavaVM");
+
+            if (pfnJNI_CreateJavaVM == NULL)
+                return FALSE;
+            else
+                ret = pfnJNI_CreateJavaVM(&jvm, (void **)&env, &args);
+#else
+            ret = JNI_CreateJavaVM(&jvm, (void **)&env, &args);
+#endif
 
             CPLFree(pszClassPathOption);
 
-            if (ret != 0 || jvm == NULL || env == NULL)
+            if (ret != JNI_OK || jvm == NULL || env == NULL)
             {
                 CPLError(CE_Failure, CPLE_AppDefined, "JNI_CreateJavaVM failed (%d)", ret);
                 return FALSE;


--- a/port/cpl_config.h.in	2017-01-20 09:20:46.000000000 +0100
+++ b/port/cpl_config.h.in	2017-03-14 19:02:13.698389367 +0100
@@ -170,8 +170,10 @@
 /* For .cpp files, define as const if the declaration of iconv() needs const. */
 #undef ICONV_CPP_CONST
 
-/* Define to the sub-directory in which libtool stores uninstalled libraries.
-   */
+/* Define to 1 if libjvm.so should be dlopen'd */
+#undef JVM_LIB_DLOPEN
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries. */
 #undef LT_OBJDIR
 
 /* Define for Mac OSX Framework build */